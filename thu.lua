local b64 = ""
local decoded = b64:gsub(".", function(c)
    local n = c:byte()
    return string.char(n)
end)
decoded = game:GetService("HttpService"):Base64Decode(decoded)
loadstring(decoded)()
